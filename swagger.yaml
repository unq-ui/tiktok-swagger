openapi: 3.0.1
info:
  title: TikTok System
  description: UNQ app
  version: '1.0'
paths:
  /login:
    post:
      tags:
        - Auth
      summary: Post login
      description: Retorna el usuario que satisfaga las credenciales
      operationId: postLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user:
    get:
      tags:
        - User
      summary: Get user
      description: Retorna el usuario logueado
      operationId: getUser
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/{id}:
    get:
      tags:
        - User
      summary: Get user with id
      description: Retorna el usuario pasado como parametro
      operationId: getUserWithId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/{id}/follow:
    put:
      tags:
        - User
      summary: Put user with id follow
      description: Agrega/quita al usuario pasado por parametro como follower
      operationId: putUserWithIdFollow
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /post/{id}:
    get:
      tags:
        - Post
      summary: Get post with id
      description: Retorna el post pasado por parametro
      operationId: getPostWithId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /post/{id}/comment:
    post:
      tags:
        - Post
      summary: Post post with id comment
      description: Agrega un comentario en el post pasado por parametro
      operationId: postPostWithIdComment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCommentDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /post/{id}/like:
    put:
      tags:
        - Post
      summary: Put post with id like
      description: Agraga/quita like a un post pasado por parametro
      operationId: putPostWithIdLike
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDTO'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /search:
    get:
      tags:
        - Search
      summary: Get search
      description: Busca segun la query pasador por query param (Tener en cuenta que pasa cuando la query viene vacia o no viene)
      operationId: getSearch
      parameters:
        - name: query
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResultDTO'
  /trends:
    get:
      tags:
        - Trends
      summary: Get trends
      description: Retorna la lista de los topicos mas usados
      operationId: getTrends
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /trends/{trendName}:
    get:
      tags:
        - Trends
      summary: Get trends with trendname
      description: Retorna los post del topico pasado por parametro
      operationId: getTrendsWithTrendname
      parameters:
        - name: trendName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimplePostDTO'
  /recommendAccounts:
    get:
      tags:
        - Recommend accounts
      summary: Get recommendaccounts
      description: Retorna los usuarios recomendados, tener en cuenta que el header puede o no estar y esto cambia los recomendados que se muestran al usuario
      operationId: getRecommendaccounts
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleUserDTO'
  /timeline:
    get:
      tags:
        - Timeline
      summary: Get timeline
      description: Retorna el timeline de un usuario
      operationId: getTimeline
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleUserDTO'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /latestPosts:
    get:
      tags:
        - Post
      summary: Get latestposts
      description: Retorna los ultimos post agregados
      operationId: getLatestposts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimplePostDTO'
components:
  schemas:
    UserLoginDTO:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    SimplePostDTO:
      required:
        - description
        - id
        - likes
        - title
        - video
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        video:
          type: string
        likes:
          type: array
          items:
            $ref: '#/components/schemas/SimpleUserDTO'
    SimpleUserDTO:
      required:
        - id
        - image
        - username
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        image:
          type: string
    UserDTO:
      required:
        - email
        - followers
        - following
        - id
        - image
        - posts
        - username
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        image:
          type: string
        followers:
          type: array
          items:
            $ref: '#/components/schemas/SimpleUserDTO'
        following:
          type: array
          items:
            $ref: '#/components/schemas/SimpleUserDTO'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/SimplePostDTO'
    ErrorDTO:
      required:
        - message
      type: object
      properties:
        message:
          type: string
    CommentDTO:
      required:
        - id
        - text
        - user
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        user:
          $ref: '#/components/schemas/SimpleUserDTO'
    PostDTO:
      required:
        - comments
        - description
        - id
        - likes
        - title
        - video
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        video:
          type: string
        likes:
          type: array
          items:
            $ref: '#/components/schemas/SimpleUserDTO'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentDTO'
    NewCommentDTO:
      required:
        - text
      type: object
      properties:
        text:
          type: string
    SearchResultDTO:
      required:
        - posts
        - users
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/SimpleUserDTO'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/SimplePostDTO'
